We are making docker image of accounts-ms through docker file. To do That :-

1) Write packaging as <packaging>jar</packaging> inside pom.xml.
2) From target folder delete all existing compiled classes.
3) Go to source location of accounts folder, right click on it and open powershell there.
4) You can check present working directory of terminal by typing 'pwd' command.
   It should be D:\Intellij\eazybytes\EazyBytes Full Microservices Course\section4\accounts.
5) Make sure maven is installed in our system. To check it run command 'mvn -version'
6) Run command 'mvn clean install' by running this command we are telling our maven to build
   our microservice and create a fresh "jar" of our ms. This command also does some
   basic unit testing too.
7) Now after building our accounts-ms we will get a "jar" inside our target folder of accounts
   by name "accounts-0.0.1-SNAPSHOT".
8) We will have all the dependencies related to accounts-ms inside this jar without any
   java dependencies.
9) To run our accounts-ms from this jar we can run command 'mvn spring-boot:run'
10) To stop running instances at terminal we can press Ctrl+c and press Enter.
11) To run our accounts-ms with the java command instead of maven command we use
    'java -jar target/accounts-0.0.1-SNAPSHOT.jar'.
12) Create a dockerfile inside accounts-ms file name should be exact "Dockerfile" without
    any extensions.
13) Inside this docker file we will write all our docker instructions.
14) Now to build our docker image we open console where our docker file is present and write
    command as 'docker build . -t pauravsingh/accounts:s4'.
    Explanation:-
    docker build = Docker CLI command to build a Docker image.
    . = current directory
    -t = tag
    pauravsingh = user name of our docker hub
    accounts = name of our docker image
    :s4 = version name, since we are inside section 4 hence s4
15) Some docker CLI commands:
    (a) docker images = to show all docker images
    (b) docker inspect image imageId = to inspect docker image with its imageId
    (c) docker run = to run docker images as containers
    (d) docker run -p <host_port>:<container_port> pauravsingh/accounts:s4 =
        runs specific docker image on specific port
    (e) docker run -d -p <host_port>:<container_port> pauravsingh/accounts:s4 =
        run container in detached mode, as if we run our container from above command
        our console becomes busy and we cannot execute any other docker command,
        hence we run container in detached mode.
    (f) docker ps = to see all existing docker containers running in my system
    (g) docker ps -a = to see all containers in our system running or stopped
    (h) docker start containerId = to run existing container as 'run' command always runs a new
        container
    (i) docker stop containerId = to stop docker container

    **NOTE: Docker container started means our microservice inside that container is also started


######################### DOCKER-COMPOSE #################################

1) "services" tag to mention all the services.
2) "deploy" tag to allocate max memory to our ms, so that ms cannot take more than required memory.
3) If we have microservices that are not communicating with each other than this
    docker compose will work fine.
4) If we have microservices that are communicating with each other then we need to add
    tag "networks" and network name so that all microservices are on same network and can
    communicate with each other.
5) To start docker compose file :- "docker compose up", "docker compose up -d" -> detached mode
6) To start docker compose file :- "docker compose start", "docker compose start -d" -> detached
    mode and existing container will be started
7) To stop docker compose file :- "docker compose down" containers will be deleted
8) To stop docker compose file :- "docker compose stop" containers will not be deleted